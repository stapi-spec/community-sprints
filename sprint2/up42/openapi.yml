openapi: '3.0.0'
info:
  version: 0.0.1
  title: UP42 Tasking
  license:
    name: MIT
servers:
  - url: /v1
paths:
  /search:
    post:
      summary: Get possible tasking options for spatial temporal query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchQuery"
      responses:
        200:
          description: A paged array of tasking options
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlotCollections"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    SlotCollections:
      type: array
      items:
        type: object
        properties:
          slotCollection:
            type: object
            description: "A slotcollection is an offerings of slots which share the same tasking properties"
            properties:
              timestamp:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
              taskingProperties:
                $ref: '#/components/schemas/TaskingProperties'
              productConfiguration:
                $ref: '#/components/schemas/ProductConfiguration'
              priority:
                $ref: '#/components/schemas/Priority'
              price:
                $ref: '#/components/schemas/Price'
              lifecycle:
                type: array
                example: [ "FEASIBILITY", "PRICE", "DELIVERY" ]
                items:
                  type: string
              slots:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 123-this-is-an-id-hash-123
                    spatial:
                      $ref: '#/components/schemas/Spatial'
                    temporal:
                      $ref: '#/components/schemas/Temporal'
                    priority:
                      $ref: '#/components/schemas/Priority'
                    price:
                      $ref: '#/components/schemas/Price'
                    incidenceAngle:
                      type: integer
                      example: 20
                    cloudCoverage:
                      type: integer
                      example: 50
                    providerSpecific:
                      type: object
                      description: "Any additional parameters that provider defines for each slot, example"
                      properties:
                        feasibility:
                          type: integer
                          description: 0-100
                          example: 80
    SearchQuery:
      required:
        - spatial
        - temporal
      properties:
        spatial:
          $ref: '#/components/schemas/Spatial'
        temporal:
          $ref: '#/components/schemas/Temporal'
        taskingProperties:
          $ref: '#/components/schemas/TaskingProperties'
        productConfiguration:
          $ref: '#/components/schemas/ProductConfiguration'
        priority:
          $ref: '#/components/schemas/Priority'
        price:
          $ref: '#/components/schemas/Price'
        lifecycle:
          type: array
          example: [ "FEASIBILITY", "PRICE", "DELIVERY" ]
          items:
            type: string
    Temporal:
      type: object
      required:
        - interval
      properties:
        interval:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: string
              nullable: true
              format: date-time
              pattern: (\\+00:00|Z)$
    Spatial:
      type: object
      required:
        - geometry
      properties:
        geometry:
          $ref: https://geojson.org/schema/Geometry.json
    TaskingProperties: # this is everything that's in slotcollection and affects number of slots
      type: object
      description: "Satellite properties that affect number of slots. 
      Every property of type array creates slotcollection for every combination with other fields. Every property of type range doesn't, i.e. 
      all existing slot collection need to be within range"
      properties:
        provider:
          type: array
          items:
            type: string
          example: ["Airbus", "Capella"]
        satelliteType:
          type: array
          items:
            type: string
          enum: [ "SAR", "Hyperspectral", "Optical", "Aerial" ]
          example: [ "Optical" ]
        sensor:
          type: array
          items:
            type: string
          example: [ "PHR", "SPOT" ]
        imageMode:
          type: array
          items:
            type: string
            example: StripMap
          example: [ "StripMap", "SpotLight" ]
        incidenceAngle:
          type: array
          minItems: 1
          example: [0, 5]
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: integer
              nullable: true
        cloudCoverage:
          type: array
          minItems: 1
          example: [0, 100]
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: integer
              nullable: true
    ProductConfiguration: # this is everything thats is in slotcollection
      type: object
      description: "Values which do not effect the slots availibility"
      properties:
        processingLevel:
          type: string
        imageFormat:
          type: string
        resolution:
          type: string
          example: uint16
    Price:
      type: array
      minItems: 1
      example: [ 0, 1000 ]
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: integer
          nullable: true
    Priority:
      type: array
      minItems: 1
      example: [ 0, 100 ]
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: integer
          nullable: true
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string